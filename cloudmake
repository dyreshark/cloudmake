#!/bin/sh

DEFAULT_REMOTEPATH_PREFIX=./cloudmake

VERBOSE=0                     # -v
USER=FIXME                    # -u
SERVER=FIXME                  # -s
CLEAN=1                       # -n
JOBS=4                        # -j
REMOTEPATH=                   # -r
LOCALPATH=.                   # -l
FULLSYNC=0                    # -d
REMOTESHELL=0                 # -f
MAKETARGET=                   # -t
SSHPORT=22                    # -p

usage() {
cat <<EOF
usage: $1 [-hndvf] [-u username] [-s servername] [-r path] [-j jobs] [-l path] 
          [-t maketarget] [-p port]

This will build a project using a Makefile on a remote system.

    -h            -- Show help
    -u username   -- Use the given username instead of the default ($USER)
    -s servername -- Use the given server instead of the default ($SERVER)
    -r path       -- Remote path to do the compilation on 
                     (default $DEFAULT_REMOTEPATH_PREFIX)
    -n            -- Do not clean the remote path before building
    -j jobs       -- Use 'jobs' jobs when compiling (default $JOBS)
    -d            -- Delete any files on remote host that don't exist on local 
                     host in the build directory. (Same as rsync's --delete)
    -l path       -- Local path to build. (default $LOCALPATH)
    -f            -- On build failure, give a shell on the remote host
    -t makeTarget -- Target for the makefile to make
    -p port       -- SSH Port Number (default $SSHPORT)
    -v            -- Verbose output
EOF
}

exitOnFail() {
    code=$1
    if [ $code -ne 0 ]; then 
        echo "Command failed with $code. Exiting" >&2
        exit $code
    fi
}

verboseEcho() {
    if [ $VERBOSE -ne 0 ]; then
        echo "$@"
    fi
}

while getopts "hvu:s:r:nj:dl:ft:p:" OPTION; do
    case $OPTION in
        h) 
            usage $0
            exit 0
            ;;
        u)
            USER=$OPTARG
            ;;
        s) 
            SERVER=$OPTARG
            ;;
        r)
            REMOTEPATH=$OPTARG
            ;;
        n)
            CLEAN=0
            ;;
        j)
            JOBS=$OPTARG
            ;;
        d)
            FULLSYNC=1
            ;;
        l)
            LOCALPATH=$OPTARG
            ;;
        f)
            REMOTESHELL=1
            ;;
        p)
            SSHPORT=$OPTARG
            ;;
        v)
            VERBOSE=1
            ;;
        ?) 
            usage $0
            exit 1
            ;;
    esac
done

if [ ! -d $LOCALPATH ]; then
    echo "Local path ($LOCALPATH) is not a valid directory" >&2
    exit 1
fi

# Hackish way to get last directory name in local path -- readlink
# isn't working as expected on OS X.
if [ -z $REMOTEPATH ]; then
    pushd $LOCALPATH >/dev/null
    subdir=`basename $(pwd)`
    popd >/dev/null
    REMOTEPATH=$DEFAULT_REMOTEPATH_PREFIX/$subdir
fi

if [ ! -e $LOCALPATH/Makefile ]; then
    echo "Need a Makefile. None exists in $LOCALPATH" >&2
    exit 1
fi

sshstring=$USER@$SERVER
header='********************************************************************************'
verboseEcho "$header"
verboseEcho "CloudMake"
verboseEcho "Working on $sshstring in $REMOTEPATH"
verboseEcho "With $JOBS jobs"
if [ ! -z $MAKETARGET ]; then verboseEcho "On target $MAKETARGET"; fi
if [ $CLEAN -eq 0 ]; then verboseEcho "Will NOT clean directory prior to building"; fi 
verboseEcho "$header"

rsyncOpts=
if [ $FULLSYNC -ne 0 ]; then rsyncOpts="$rsyncOpts --delete"; fi

echo "Transferring files..." >&2
ssh -p $SSHPORT $sshstring "mkdir -p $REMOTEPATH"
exitOnFail $?
rsync --port=$SSHPORT -auz $rsyncOpts $LOCALPATH $sshstring:$REMOTEPATH
exitOnFail $?

if [ $CLEAN -ne 0 ]; then
    echo "Cleaning prior build..." >&2
    ssh $sshstring "cd '$REMOTEPATH'; make clean"
    exitOnFail $?
fi

echo "Executing build..." >&2
ssh -p $SSHPORT $sshstring "cd '$REMOTEPATH'; make -j$JOBS $MAKETARGET"
if [ $? -ne 0 ]; then 
    verboseEcho "Build failed."
    if [ $REMOTESHELL -ne 0 ]; then 
        echo " ** Opening remote terminal... (Build located at $REMOTEPATH) ** " >&2
        ssh -p $SSHPORT $sshstring
    fi
fi
